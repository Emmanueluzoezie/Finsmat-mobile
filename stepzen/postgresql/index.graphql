type History {
  amount: Float
  created_at: DateTime
  descriptions: String
  id: ID!
  title: String
  user: User @materializer(query: "getUserUsingHistory_user_id_fkey")
  user_id: ID
}

type Questions {
  answer_a: String
  answer_b: String
  answer_c: String
  correct_answer: String
  created_at: DateTime!
  id: ID!
  question: String
  question_level: String
  question_type: String
  user_id:ID
}

type User {
  badge: String
  coins: Float
  created_at: DateTime!
  email: String
  full_name: String
  history: [History] @materializer(query: "getHistoryUsingHistory_user_id_fkey")
  id: ID!
  image: String
  token: Float
  user_secret: String
  user_sol_address: String
  username: String
  isAdminUser: Boolean
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
  " Queries for type 'History' "
  getHistory(id: ID!): History
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "history"
      configuration: "postgresql_config"
    )
  getHistoryList: [History]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "history"
      configuration: "postgresql_config"
    )
  getHistoryByUser_Id(user_id: ID!): [History]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT * FROM "history" WHERE "user_id" = $1
      ORDER BY "created_at" DESC
      """
      configuration: "postgresql_config"
    )
  getHistoryPaginatedList(first: Int, after: Int): [History]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "amount", "created_at", "id", "title", "user_id" FROM "history" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getHistoryUsingHistory_user_id_fkey(id: ID!): [History]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "amount", "created_at", "id", "title", "user_id" FROM "history" WHERE "user_id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Questions' "
  getQuestions(id: ID!): Questions
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Questions"
      configuration: "postgresql_config"
    )
  getQuestionsList: [Questions]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Questions"
      configuration: "postgresql_config"
    )
  getQuestionsByType(question_type: String): [Questions]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query:"""
        SELECT * from "Questions" where "question_type" = $1
      """
      configuration: "postgresql_config"
    )
  getQuestionsPaginatedList(first: Int, after: Int): [Questions]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "answer_a", "answer_b", "answer_c", "correct_answer", "created_at", "id", "question", "question_level", "question_type" FROM "Questions" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )

  " Queries for type 'User' "
  getUser(id: ID!): User
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "User"
      configuration: "postgresql_config"
    )
  getUserList: [User]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "User"
      configuration: "postgresql_config"
    )
  getUserByEmail(email: String!): [User]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
       select *, "User".id as id from "User" where "User"."email" = $1
      """
      configuration: "postgresql_config"
    )
  getUserPaginatedList(first: Int, after: Int): [User]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "badge", "coins", "created_at", "email", "full_name", "id", "image", "token", "user_secret", "user_sol_address", "username", "isAdminUser" FROM "User" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getUserUsingHistory_user_id_fkey(user_id: ID!): User
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "badge", "coins", "created_at", "email", "full_name", "id", "image", "token", "user_secret", "user_sol_address", "username", "isAdminUser" FROM "User" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  getUserUsingUpdate_user_user_id_fkey(user_id: ID!): User
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "badge", "coins", "created_at", "email", "full_name", "id", "image", "token", "user_secret", "user_sol_address", "username", "isAdminUser" FROM "User" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
  " Mutations for type 'History' "
  deleteHistory(id: ID!): History
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "history"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertHistory(
    created_at: DateTime
    title: String
    user_id: ID
    amount: Float
    descriptions: String
  ): History
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "history"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateHistory(
    id: ID!
    amount: Float
    created_at: DateTime
    title: String
    user_id: ID
    descriptions: String
  ): History
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "history" SET
        "amount" = COALESCE($2, "amount"),
        "created_at" = COALESCE($3, "created_at"),
        "title" = COALESCE($4, "title"),
        "user_id" = COALESCE($5, "user_id")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Questions' "
  deleteQuestions(id: ID!): Questions
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Questions"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertQuestions(
    question: String
    question_level: String
    answer_c: String
    question_type: String
    answer_a: String
    correct_answer: String
    id: ID!
    answer_b: String
    user_id: ID
    created_at: DateTime!
  ): Questions
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Questions"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateQuestions(
    id: ID!
    answer_a: String
    answer_b: String
    answer_c: String
    correct_answer: String
    created_at: DateTime

    question: String
    question_level: String
    question_type: String
  ): Questions
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "Questions" SET
        "answer_a" = COALESCE($2, "answer_a"),
        "answer_b" = COALESCE($3, "answer_b"),
        "answer_c" = COALESCE($4, "answer_c"),
        "correct_answer" = COALESCE($5, "correct_answer"),
        "created_at" = COALESCE($6, "created_at"),
        "question" = COALESCE($8, "question"),
        "question_level" = COALESCE($9, "question_level"),
        "question_type" = COALESCE($10, "question_type")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  
  " Mutations for type 'User' "
  deleteUser(id: ID!): User
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "User"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertUser(
    user_secret: String
    email: String
    user_sol_address: String
    token: Float
    badge: String
    full_name: String
    image: String
    created_at: DateTime
    coins: Float
    username: String
    isAdminUser: Boolean
  ): User
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "User"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateUser(
    id: ID!
    badge: String
    coins: Float
    created_at: DateTime
    email: String
    full_name: String
    image: String
    token: Float
    user_secret: String
    user_sol_address: String
  ): User
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "User" SET
        "badge" = COALESCE($2, "badge"),
        "coins" = COALESCE($3, "coins"),
        "created_at" = COALESCE($4, "created_at"),
        "email" = COALESCE($5, "email"),
        "full_name" = COALESCE($6, "full_name"),
        "image" = COALESCE($7, "image"),
        "token" = COALESCE($8, "token"),
        "user_secret" = COALESCE($9, "user_secret"),
        "user_sol_address" = COALESCE($10, "user_sol_address")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  updateUserCoins(
    id: ID!
    coins: Float
  ): User
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "User" SET
        "coins" = COALESCE($2, "coins")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
}
